{
	"info": {
		"_postman_id": "13c6ad55-9f92-4725-8c2a-e8576e6c01e9",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25130241"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"// Проверить, что в body приходит правильный string\r",
							"pm.test(\"Check string\", function () {\r",
							"\t pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"     });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name\r",
							"var resp_age = jsonData.age\r",
							"var resp_salary = jsonData.salary\r",
							"\r",
							"console.log(resp_name)\r",
							"console.log(resp_age)\r",
							"console.log(resp_salary)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Chek_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Yaroslav\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Chek_age\", function () {\r",
							"     pm.expect(resp_age).to.eql(\"26\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Chek_salary\", function () {\r",
							"     pm.expect(resp_salary).to.eql(80000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data\r",
							"var req_name = req.name\r",
							"var req_age = req.age\r",
							"var req_salary = +req.salary\r",
							"var req_body = request.body\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name_req\", function () {\r",
							"\tpm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age_req\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary_req\", function () {\r",
							" pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							" var resp_family = pm.response.json();\r",
							" pm.test(\"Check Family\", function () {\r",
							" var Family = jsonData.family;\r",
							" });\r",
							" console.log(jsonData.family)\r",
							"\r",
							"//  Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var salary_for_1_5_years = req.salary * 4\r",
							"var u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"\tpm.test(\"Check u_salary_1_5_year\", function () {\r",
							"\tpm.expect(salary_for_1_5_years).to.eql(u_salary_1_5_year)\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yaroslav",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "80000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							" //  Спарсить request.\r",
							"var req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = jsonData.name\r",
							"var req_name = req.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resp_age = jsonData.age\r",
							"var req_age = req.age\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resp_salary = jsonData.salary\r",
							"var req_salary = +req.salary\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var resp_family = jsonData.family\r",
							"console.log(resp_family.children,resp_family.pets)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check_name_dog\", function () {\r",
							"    pm.expect(resp_family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check_age_dog\", function () {\r",
							"    pm.expect(resp_family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр name имеет значение Luky\r",
							"// var resp_dog_name = jsonData.family.pets.dog.name\r",
							"pm.test(\"Check_name_dog_Luky\", function () {\r",
							"    pm.expect(resp_family.pets.dog.name).to.to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check_age_dog_4\", function () {\r",
							"    pm.expect(resp_family.pets.dog.age).to.to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yaroslav",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Yaroslav&age=26&salary=80000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yaroslav"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							" //  Спарсить request.\r",
							"var req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = jsonData.name\r",
							"var req_name = req.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resp_age = jsonData.age\r",
							"var req_age = +req.age\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response\r",
							"var resp_salary = jsonData.salary\r",
							"console.log(resp_salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp_salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[2])\r",
							"\r",
							"//  Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var req_salary = +req.salary\r",
							"pm.test(\"Check_salary_0\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// . Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_1=2x\", function () {\r",
							"    pm.expect(+resp_salary[1]).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_1=3x\", function () {\r",
							"    pm.expect(+resp_salary[2]).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_name);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_age);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_salary[0]);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"var i;\r",
							"for (i = 0; i < resp_salary.length; ++i) {\r",
							"console.log(resp_salary[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yaroslav",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Yaroslav&age=26&salary=80000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yaroslav"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"var resp_person = jsonData.person\r",
							"\r",
							"\r",
							"// Спарсить request\r",
							"var req = request.data\r",
							"var req_salary = req.salary\r",
							"var req_name = req.name\r",
							"var req_age = req.age\r",
							"console.log(\"Req name=  \" + req.name)\r",
							"console.log(\"Req age=  \" + req.age)\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"console.log(\"Salary=\" + req_salary)\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_start_qa_salary_and_salary_req\", function () {\r",
							"    pm.expect(jsonData.start_qa_salar).to.eql+(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_6_months_and_salary_x2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql+(req_salary*2);\r",
							"});\r",
							"console.log(\"qa salary after 6 months  =\" + req.salary*2)\r",
							"\r",
							"//  Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_12_months_and_salary_x2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql+(req_salary*2.7);\r",
							"});\r",
							"console.log(\"qa salary after 12 months  =\" + req.salary*2.7)\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_1.5_years_salary*3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql+(req_salary*3.3);\r",
							"});\r",
							"console.log(\"qa salary after 1.5 year  =\" + req.salary*3.3)\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_3.5_years_salary*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_year\"]).to.eql+(req_salary*3.8);\r",
							"});\r",
							"console.log(\"qa salary after 3.5 years =\" + req.salary*3.8)\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_person_e_name_salaryreq\", function () {\r",
							"    pm.expect(resp_person.u_name[1]).to.eql+(req_salary);\r",
							"});\r",
							"console.log(\"resp_person.u_name[1] =\" + req_salary)\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check_u_age\", function () {\r",
							"    pm.expect(resp_person.u_age).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_salary_5_years\", function () {\r",
							"    pm.expect(resp_person.u_salary_5_years).to.eql+(req_salary*4.2);\r",
							"});\r",
							"console.log(\"u_salary_5_years =\" + req_salary*4.2)\r",
							"\r",
							"//  ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (info in resp_person) {\r",
							"console.log(info, resp_person[info]);\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}